use ProtossProbe as knowledge.
use "../GenericMods/GenericPredicates" as knowledge.
use "../GenericMods/GenericPercepts" as module.

module ProtossProbeEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
		
	% The generic percepts most units use
	if true then GenericPercepts.
	
	if bel(shouldMineVespene, self(MyId,_)) then print("Need to get gas").
	
	% Check if an other probe has become the gas collector
	if bel(workerActivity(MyId,gatheringGas), friendly("Protoss Probe", Id,_,_), self(MyId,_), Id > MyId)
		 then print("I am no longer the gas probe.") + adopt(workerActivity(MyId,gatheringMinerals)).
	
	% See if I need to be the gas collector
	if bel(shouldMineVespene, self(MyId,_)), not(bel(friendly("Protoss Probe", Id,_,_), MyId < Id))
		then adopt(workerActivity(MyId, gatheringGas)) + print("Goal is to mine gas.").
	
	
	% If there are friendly probes in believe state and I have the lowest Id, I am the builder
	if bel(self(MyId,_), friendly("Protoss Probe",_,_,_), not(builder)), not(bel(friendly("Protoss Probe",Id,_,_), MyId>Id ))
		then insert(builder) + print("I believe I am the lowest ranked probe " + MyId).
	if bel(builder, friendly("Protoss Probe", Id,_,_), self(MyId,_), Id < MyId) then delete(builder) + print("I am no longer the builder.").
	
		
	% Update probestatus
	if percept(workerActivity(Id,Z)), bel(self(Id,_), probeStatus(Id,X,Y), X\=Z) then delete(probeStatus(Id,X,Y))+insert(probeStatus(Id,Z,Y)) + print("Updated my status believe").
	if bel(builder, probeStatus(Id,X,false)) then delete(probeStatus(Id,X,false)) + insert(probeStatus(Id,X,true)).
	
	
	if bel(self(Id,_)), percept(workerActivity(Id,X)) then print("I am doing: " + X).
	
	%Update my believe about what I'm doing
	if percept(workerActivity(Id,Y)), bel(self(Id,_), workerActivity(Id,X), X\=Y) then delete(workerActivity(Id,X)) + insert(workerActivity(Id,Y)).
	
	% The handling of the conditions 
	if percept(status(_,_,_,NewCond,_,_)), bel(condition(OldCond), NewCond \= OldCond) then delete(condition(OldCond)) + insert(condition(NewCond)).
	
	% The handling of the supply percept
	if percept(resources(_, _, C, T)), bel(supply(OC, OT), (not(OC == C) ; not(OT == T))) then delete(supply(OC, OT)) + insert(supply(C, T)).
	
	% The handling of mineralfields	
	forall percept(mineralField(Id,Amount,_,X,Y)), not(bel(mineralField(Id,Amount,X,Y))) do insert(mineralField(Id,Amount,X,Y)).
	forall bel(mineralField(Id,Amount,X,Y)), not(percept(mineralField(Id,Amount,_,X,Y))) do delete(mineralField(Id,Amount,X,Y)).
	
	% The handling of the constructionSites
	forall percept(constructionSite(X,Y,B)), not(bel(constructionSite(X,Y,B))) do insert(constructionSite(X,Y,B)).
	forall bel(constructionSite(X,Y,B)),not(percept(constructionSite(X,Y,B))) do delete(constructionSite(X,Y,B)).
	
	% The handling of the workerActivity
	forall percept(workerActivity(ID,ACT)), bel(not(workerActivity(ID,ACT))) do insert(workerActivity(ID,ACT)).
	forall bel(workerActivity(ID,ACT)),not(percept(workerActivity(ID,ACT))) do delete(workerActivity(ID,ACT)).
				
	%%%%%%%%%%%%%%% --------------------------------------- GOALS --------------------------------------- %%%%%%%%%%%%%%%
	% If there is no Pylon yet and 8 probes already, create one
	if bel(builder, not(friendly("Protoss Pylon", _, _, _)))
		then adopt(unitAmount("Protoss Pylon", 1)).
	
	% If no Gateways yet, build two of them	
	if bel(builder, not(unitAmount("Protoss Gateway",_)), unitAmount("Protoss Pylon",_))
		then adopt(unitAmount("Protoss Gateway", 2)).
		
	% Phase 3, build extra gateways
	if bel(builder, phase(X), X>2, unitAmount("Protoss Gateway",Y), Y<4)
		then adopt (unitAmount("Protoss Gateway", 4)).
	
		% If enough probes, then build assimilator
	if bel(builder, not(unitAmount("Protoss Assimilator",_)), unitAmount("Protoss Probe", 6))
		then adopt(unitAmount("Protoss Assimilator", 1)).
	 
	% Build pylons for supply
	if bel(builder, unitAmount("Protoss Pylon", N), M is N +1, unitAmount("Protoss Gateway", 2), supply(CS, TS), TS - CS < 8) 
		then adopt(unitAmount("Protoss Pylon", M)).
		
	% Build Cybernetics Core
	if bel(builder, phase(Z), Z > 1, not(unitAmount("Protoss Cybernetics Core",_)))
		then adopt(unitAmount("Protoss Cybernetics Core",1)).

	
	% when idling, start mining minerals
	if bel(workerActivity(Id,idling), self(Id,_))
		then adopt(workerActivity(Id, gatheringMinerals)).
	
	% If builder then only gather when building work is over
	if bel(builder, self(Id, _), (not(unitAmount("Protoss Pylon", _)) ; unitAmount("Protoss Gateway", 2))) 
		then adopt(workerActivity(Id, gatheringMinerals)).
		
		
		% The handling of constructed Assimilator locations
	forall percept(unit(true, Type,Id,Health,Shields,IsUnderConstruction), Type = "Protoss Assimilator", IsUnderConstruction \=[beingConstructed]), not(bel(assimilator(Id)))
		%do print("I believe there is an Assimilator with ID " + Id) + 
		do insert(assimilator(Id)).
				
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	
	% If don't know nexus location yet, start asking Nexus
	if not(bel(nexusPosition(_, _))) then (protossNexus).send?(nexusPosition).
	
	% If nexus location is told, insert it into the knowledge base
	if (_).sent:(nexusPosition(X, Y)) then insert(nexusPosition(X, Y)).
}